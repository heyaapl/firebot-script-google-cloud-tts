export interface EffectModel {
    /** The text to be synthesized into audio. */
    text: string;
    /** The 0-10 volume level to play back the audio at. */
    volume: number;
    /** Information about which audio device to play the audio on. */
    audioOutputDevice?: {
      deviceId?: string;
      label?: string;
    };
    /** The name of the voice to use for speech synthesis. */
    voiceName: string;
    /** Voice pitch adjustment in semitones, from -20 to 20; default 0. */
    pitch: number;
    /** Speech rate multiplier, from 0.25 to 4; default 1. */
    speakingRate: number;
    
    /** Use a backup voice should the provided `voiceName` not evaluate to a legit voice
     * after variable replacement.
     */
    backupVoice?: string;
    /** Which overlay instance should play back the audio. New in 2.0. */
    overlayInstance?: string;
    /** How to handle effect errors. New in 2.0. */
    stopOnError?: false | "bubble" | "stop" | "bubble-stop";
    /** `true` or `undefined` to wait for the audio to finish playback plus 1.5 seconds as in
     * the 1.0 versions, or `false` to return as soon as the audio begins playback. New in 2.0.
     */
    waitComplete?: boolean;

    /** Used previously to allow selecting voice genders, but was obsoleted by Google. @deprecated */
    voiceGender?: string;
};
/** A Google Cloud Text-to-Speech voice model type. */
export type SpeechModel = "Casual" | "Chirp" | "Neural" | "News" | "Polyglot" | "Standard" | "Studio" | "Wavenet" | "Unknown";
/** A Google Cloud Text-to-Speech pricing bucket. */
export type PricingBucket = "Chirp" | "Neural" | "Polyglot" | "Standard" | "Studio" | "Wavenet" | "Unknown";
/** The custom outputs from a Google TTS synthesis effect. */
export type SynthesisResult = {
    /** The number of seconds of audio generated by the effect. */
    ttsAudioDuration: number;
    /** The number of characters or bytes that were expended. */
    ttsCost: number;
    /** The pricing tier that was used by the effect. */
    ttsPricingTier: PricingBucket;
    /** Whether or not the effect succeeded. */
    ttsSucceeded: boolean;
    /** The name of the voice that was requested. */
    ttsVoiceName: string;
};

/** Information about a Google TTS voice. */
export interface VoiceData {
    /** The unique name of the voice, such as "en-US-Wavenet-F". */
    name: string;
    /** The language (locale) and gender of the voice, such as "English (US) | Female". */
    language: string;
    /** The gender of the voice, generally either "Male" or "Female" */
    gender: "Female" | "Male";
};

interface BasePlaySoundData {
    /** Information about which audio device to play the audio on. */
    audioOutputDevice: {
        /** The unique identifier of the audio device. */
        deviceId?: "default" | "overlay" | string;
        /** The friendly name of the audio device, such as "App Default", "Send To Overlay", or "Speakers". */
        label?: string;
    };
    /** The file extension. */
    format: string;
    /** The length of the audio file. */
    maxSoundLength: number;
    /** How loud should the audio be played, from 0 to 10. */
    volume: number;

    /** Which overlay instance to use, should overlay instancing be enabled. */
    overlayInstance?: string;
    /** A permission slip so that the audio file can bypass the blood-brain barrier. */
    resourceToken?: string;
};
interface PlaySoundFileData extends BasePlaySoundData {
    /** `false` when the sound data is a local file. */
    isUrl: false;
    /** A path to the sound file to be played. */
    filepath: string;
};
interface PlaySoundUrlData extends BasePlaySoundData {
    /** `true` when the sound data represents an URL. */
    isUrl: true;
    /** An URL pointing to the sound to be played. */
    url: string;
};
/** The data type of a "playsound" communicator signal argument,
 * as used by the Firebot app/services/sound.service.js PLAY_SOUND listener.
 */
export type PlaySoundData = PlaySoundFileData | PlaySoundUrlData;
